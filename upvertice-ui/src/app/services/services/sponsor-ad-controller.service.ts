/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteSponsorAd } from '../fn/sponsor-ad-controller/delete-sponsor-ad';
import { DeleteSponsorAd$Params } from '../fn/sponsor-ad-controller/delete-sponsor-ad';
import { getAllSponsorAds } from '../fn/sponsor-ad-controller/get-all-sponsor-ads';
import { GetAllSponsorAds$Params } from '../fn/sponsor-ad-controller/get-all-sponsor-ads';
import { PageResponseSponsorAdResponse } from '../models/page-response-sponsor-ad-response';
import { SponsorAdResponse } from '../models/sponsor-ad-response';
import { updateSponsorAd } from '../fn/sponsor-ad-controller/update-sponsor-ad';
import { UpdateSponsorAd$Params } from '../fn/sponsor-ad-controller/update-sponsor-ad';

@Injectable({ providedIn: 'root' })
export class SponsorAdControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSponsorAd()` */
  static readonly UpdateSponsorAdPath = '/sponsorAd/updateAd/{adId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSponsorAd()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSponsorAd$Response(params: UpdateSponsorAd$Params, context?: HttpContext): Observable<StrictHttpResponse<SponsorAdResponse>> {
    return updateSponsorAd(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSponsorAd$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSponsorAd(params: UpdateSponsorAd$Params, context?: HttpContext): Observable<SponsorAdResponse> {
    return this.updateSponsorAd$Response(params, context).pipe(
      map((r: StrictHttpResponse<SponsorAdResponse>): SponsorAdResponse => r.body)
    );
  }

  /** Path part for operation `getAllSponsorAds()` */
  static readonly GetAllSponsorAdsPath = '/sponsorAd/sponsorAds';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSponsorAds()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSponsorAds$Response(params?: GetAllSponsorAds$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSponsorAdResponse>> {
    return getAllSponsorAds(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSponsorAds$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSponsorAds(params?: GetAllSponsorAds$Params, context?: HttpContext): Observable<PageResponseSponsorAdResponse> {
    return this.getAllSponsorAds$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSponsorAdResponse>): PageResponseSponsorAdResponse => r.body)
    );
  }

  /** Path part for operation `deleteSponsorAd()` */
  static readonly DeleteSponsorAdPath = '/sponsorAd/{adId}/deleteAd';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSponsorAd()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSponsorAd$Response(params: DeleteSponsorAd$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteSponsorAd(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSponsorAd$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSponsorAd(params: DeleteSponsorAd$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteSponsorAd$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
