/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { chooseSupplierOffer } from '../fn/supplier-offer-controller/choose-supplier-offer';
import { ChooseSupplierOffer$Params } from '../fn/supplier-offer-controller/choose-supplier-offer';
import { createSupplierOffer } from '../fn/supplier-offer-controller/create-supplier-offer';
import { CreateSupplierOffer$Params } from '../fn/supplier-offer-controller/create-supplier-offer';
import { deleteSupplierOffer } from '../fn/supplier-offer-controller/delete-supplier-offer';
import { DeleteSupplierOffer$Params } from '../fn/supplier-offer-controller/delete-supplier-offer';
import { getAllSupplierOffers } from '../fn/supplier-offer-controller/get-all-supplier-offers';
import { GetAllSupplierOffers$Params } from '../fn/supplier-offer-controller/get-all-supplier-offers';
import { getSupplierOffersByStatus } from '../fn/supplier-offer-controller/get-supplier-offers-by-status';
import { GetSupplierOffersByStatus$Params } from '../fn/supplier-offer-controller/get-supplier-offers-by-status';
import { PageResponseSupplierOfferResponse } from '../models/page-response-supplier-offer-response';
import { SupplierOfferResponse } from '../models/supplier-offer-response';
import { SupplierTransactionResponse } from '../models/supplier-transaction-response';
import { updateSupplierChoice } from '../fn/supplier-offer-controller/update-supplier-choice';
import { UpdateSupplierChoice$Params } from '../fn/supplier-offer-controller/update-supplier-choice';
import { updateSupplierOffer } from '../fn/supplier-offer-controller/update-supplier-offer';
import { UpdateSupplierOffer$Params } from '../fn/supplier-offer-controller/update-supplier-offer';

@Injectable({ providedIn: 'root' })
export class SupplierOfferControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSupplierChoice()` */
  static readonly UpdateSupplierChoicePath = '/supplier-offers/{transactionId}/update-choice/{newSupplierOfferId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSupplierChoice()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateSupplierChoice$Response(params: UpdateSupplierChoice$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierTransactionResponse>> {
    return updateSupplierChoice(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSupplierChoice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateSupplierChoice(params: UpdateSupplierChoice$Params, context?: HttpContext): Observable<SupplierTransactionResponse> {
    return this.updateSupplierChoice$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierTransactionResponse>): SupplierTransactionResponse => r.body)
    );
  }

  /** Path part for operation `chooseSupplierOffer()` */
  static readonly ChooseSupplierOfferPath = '/supplier-offers/{supplierOfferId}/choose';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `chooseSupplierOffer()` instead.
   *
   * This method doesn't expect any request body.
   */
  chooseSupplierOffer$Response(params: ChooseSupplierOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SupplierTransactionResponse>>> {
    return chooseSupplierOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `chooseSupplierOffer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  chooseSupplierOffer(params: ChooseSupplierOffer$Params, context?: HttpContext): Observable<Array<SupplierTransactionResponse>> {
    return this.chooseSupplierOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SupplierTransactionResponse>>): Array<SupplierTransactionResponse> => r.body)
    );
  }

  /** Path part for operation `createSupplierOffer()` */
  static readonly CreateSupplierOfferPath = '/supplier-offers/create';

  /**
   * Create a new SupplierOffer.
   *
   * Allows admin to create a supplier offer with optional image upload
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSupplierOffer()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createSupplierOffer$Response(params?: CreateSupplierOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierOfferResponse>> {
    return createSupplierOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new SupplierOffer.
   *
   * Allows admin to create a supplier offer with optional image upload
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSupplierOffer$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createSupplierOffer(params?: CreateSupplierOffer$Params, context?: HttpContext): Observable<SupplierOfferResponse> {
    return this.createSupplierOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierOfferResponse>): SupplierOfferResponse => r.body)
    );
  }

  /** Path part for operation `updateSupplierOffer()` */
  static readonly UpdateSupplierOfferPath = '/supplier-offers/update/{id}';

  /**
   * Update an existing SupplierOffer.
   *
   * Allows admin or provider to update a supplier offer with optional new image
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSupplierOffer()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateSupplierOffer$Response(params: UpdateSupplierOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierOfferResponse>> {
    return updateSupplierOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing SupplierOffer.
   *
   * Allows admin or provider to update a supplier offer with optional new image
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSupplierOffer$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateSupplierOffer(params: UpdateSupplierOffer$Params, context?: HttpContext): Observable<SupplierOfferResponse> {
    return this.updateSupplierOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierOfferResponse>): SupplierOfferResponse => r.body)
    );
  }

  /** Path part for operation `getSupplierOffersByStatus()` */
  static readonly GetSupplierOffersByStatusPath = '/supplier-offers/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSupplierOffersByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSupplierOffersByStatus$Response(params: GetSupplierOffersByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSupplierOfferResponse>> {
    return getSupplierOffersByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSupplierOffersByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSupplierOffersByStatus(params: GetSupplierOffersByStatus$Params, context?: HttpContext): Observable<PageResponseSupplierOfferResponse> {
    return this.getSupplierOffersByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSupplierOfferResponse>): PageResponseSupplierOfferResponse => r.body)
    );
  }

  /** Path part for operation `getAllSupplierOffers()` */
  static readonly GetAllSupplierOffersPath = '/supplier-offers/AllSupplierOffers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSupplierOffers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSupplierOffers$Response(params?: GetAllSupplierOffers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSupplierOfferResponse>> {
    return getAllSupplierOffers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSupplierOffers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSupplierOffers(params?: GetAllSupplierOffers$Params, context?: HttpContext): Observable<PageResponseSupplierOfferResponse> {
    return this.getAllSupplierOffers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSupplierOfferResponse>): PageResponseSupplierOfferResponse => r.body)
    );
  }

  /** Path part for operation `deleteSupplierOffer()` */
  static readonly DeleteSupplierOfferPath = '/supplier-offers/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSupplierOffer()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSupplierOffer$Response(params: DeleteSupplierOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSupplierOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSupplierOffer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSupplierOffer(params: DeleteSupplierOffer$Params, context?: HttpContext): Observable<void> {
    return this.deleteSupplierOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
