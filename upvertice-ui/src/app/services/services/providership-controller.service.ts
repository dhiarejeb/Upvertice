/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createProvidership } from '../fn/providership-controller/create-providership';
import { CreateProvidership$Params } from '../fn/providership-controller/create-providership';
import { deleteProvidership } from '../fn/providership-controller/delete-providership';
import { DeleteProvidership$Params } from '../fn/providership-controller/delete-providership';
import { getAllProviderships } from '../fn/providership-controller/get-all-providerships';
import { GetAllProviderships$Params } from '../fn/providership-controller/get-all-providerships';
import { PageResponseProvidershipResponse } from '../models/page-response-providership-response';
import { ProvidershipResponse } from '../models/providership-response';
import { updateProvidership } from '../fn/providership-controller/update-providership';
import { UpdateProvidership$Params } from '../fn/providership-controller/update-providership';

@Injectable({ providedIn: 'root' })
export class ProvidershipControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createProvidership()` */
  static readonly CreateProvidershipPath = '/providership/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProvidership()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProvidership$Response(params?: CreateProvidership$Params, context?: HttpContext): Observable<StrictHttpResponse<ProvidershipResponse>> {
    return createProvidership(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProvidership$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProvidership(params?: CreateProvidership$Params, context?: HttpContext): Observable<ProvidershipResponse> {
    return this.createProvidership$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProvidershipResponse>): ProvidershipResponse => r.body)
    );
  }

  /** Path part for operation `updateProvidership()` */
  static readonly UpdateProvidershipPath = '/providership/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProvidership()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProvidership$Response(params: UpdateProvidership$Params, context?: HttpContext): Observable<StrictHttpResponse<ProvidershipResponse>> {
    return updateProvidership(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProvidership$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProvidership(params: UpdateProvidership$Params, context?: HttpContext): Observable<ProvidershipResponse> {
    return this.updateProvidership$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProvidershipResponse>): ProvidershipResponse => r.body)
    );
  }

  /** Path part for operation `getAllProviderships()` */
  static readonly GetAllProvidershipsPath = '/providership';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProviderships()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProviderships$Response(params: GetAllProviderships$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProvidershipResponse>> {
    return getAllProviderships(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProviderships$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProviderships(params: GetAllProviderships$Params, context?: HttpContext): Observable<PageResponseProvidershipResponse> {
    return this.getAllProviderships$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProvidershipResponse>): PageResponseProvidershipResponse => r.body)
    );
  }

  /** Path part for operation `deleteProvidership()` */
  static readonly DeleteProvidershipPath = '/providership/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProvidership()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProvidership$Response(params: DeleteProvidership$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteProvidership(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProvidership$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProvidership(params: DeleteProvidership$Params, context?: HttpContext): Observable<string> {
    return this.deleteProvidership$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
