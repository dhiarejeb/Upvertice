/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createUser } from '../fn/user-controller/create-user';
import { CreateUser$Params } from '../fn/user-controller/create-user';
import { deleteUser } from '../fn/user-controller/delete-user';
import { DeleteUser$Params } from '../fn/user-controller/delete-user';
import { deleteUserFromKeycloak } from '../fn/user-controller/delete-user-from-keycloak';
import { DeleteUserFromKeycloak$Params } from '../fn/user-controller/delete-user-from-keycloak';
import { getAdvertiserEmails } from '../fn/user-controller/get-advertiser-emails';
import { GetAdvertiserEmails$Params } from '../fn/user-controller/get-advertiser-emails';
import { updateUserFromKeycloak } from '../fn/user-controller/update-user-from-keycloak';
import { UpdateUserFromKeycloak$Params } from '../fn/user-controller/update-user-from-keycloak';
import { updateUserInKeycloak } from '../fn/user-controller/update-user-in-keycloak';
import { UpdateUserInKeycloak$Params } from '../fn/user-controller/update-user-in-keycloak';
import { uploadProfilePhoto } from '../fn/user-controller/upload-profile-photo';
import { UploadProfilePhoto$Params } from '../fn/user-controller/upload-profile-photo';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUserInKeycloak()` */
  static readonly UpdateUserInKeycloakPath = '/users/update-in-keycloak';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserInKeycloak()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateUserInKeycloak$Response(params?: UpdateUserInKeycloak$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateUserInKeycloak(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserInKeycloak$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateUserInKeycloak(params?: UpdateUserInKeycloak$Params, context?: HttpContext): Observable<{
}> {
    return this.updateUserInKeycloak$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateUserFromKeycloak()` */
  static readonly UpdateUserFromKeycloakPath = '/users/update-from-keycloak';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserFromKeycloak()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserFromKeycloak$Response(params: UpdateUserFromKeycloak$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateUserFromKeycloak(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserFromKeycloak$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserFromKeycloak(params: UpdateUserFromKeycloak$Params, context?: HttpContext): Observable<{
}> {
    return this.updateUserFromKeycloak$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createUser()` */
  static readonly CreateUserPath = '/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Response(params: CreateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser(params: CreateUser$Params, context?: HttpContext): Observable<{
}> {
    return this.createUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `uploadProfilePhoto()` */
  static readonly UploadProfilePhotoPath = '/users/{userId}/upload-photo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadProfilePhoto()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadProfilePhoto$Response(params: UploadProfilePhoto$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return uploadProfilePhoto(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadProfilePhoto$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadProfilePhoto(params: UploadProfilePhoto$Params, context?: HttpContext): Observable<string> {
    return this.uploadProfilePhoto$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAdvertiserEmails()` */
  static readonly GetAdvertiserEmailsPath = '/users/advertiser-emails';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAdvertiserEmails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAdvertiserEmails$Response(params?: GetAdvertiserEmails$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAdvertiserEmails(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAdvertiserEmails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAdvertiserEmails(params?: GetAdvertiserEmails$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAdvertiserEmails$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/users/delete/{keycloakId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteUserFromKeycloak()` */
  static readonly DeleteUserFromKeycloakPath = '/users/delete-from-keycloak/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserFromKeycloak()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserFromKeycloak$Response(params: DeleteUserFromKeycloak$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteUserFromKeycloak(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserFromKeycloak$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserFromKeycloak(params: DeleteUserFromKeycloak$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteUserFromKeycloak$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
