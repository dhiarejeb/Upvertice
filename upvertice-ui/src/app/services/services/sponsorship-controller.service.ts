/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteSponsorship } from '../fn/sponsorship-controller/delete-sponsorship';
import { DeleteSponsorship$Params } from '../fn/sponsorship-controller/delete-sponsorship';
import { getAllSponsorships } from '../fn/sponsorship-controller/get-all-sponsorships';
import { GetAllSponsorships$Params } from '../fn/sponsorship-controller/get-all-sponsorships';
import { getSponsorshipById } from '../fn/sponsorship-controller/get-sponsorship-by-id';
import { GetSponsorshipById$Params } from '../fn/sponsorship-controller/get-sponsorship-by-id';
import { getSponsorshipsByStatus } from '../fn/sponsorship-controller/get-sponsorships-by-status';
import { GetSponsorshipsByStatus$Params } from '../fn/sponsorship-controller/get-sponsorships-by-status';
import { PageResponseSponsorshipResponse } from '../models/page-response-sponsorship-response';
import { SponsorshipResponse } from '../models/sponsorship-response';
import { updateSponsorshipStatus } from '../fn/sponsorship-controller/update-sponsorship-status';
import { UpdateSponsorshipStatus$Params } from '../fn/sponsorship-controller/update-sponsorship-status';

@Injectable({ providedIn: 'root' })
export class SponsorshipControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSponsorshipStatus()` */
  static readonly UpdateSponsorshipStatusPath = '/sponsorships/{sponsorshipId}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSponsorshipStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateSponsorshipStatus$Response(params: UpdateSponsorshipStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateSponsorshipStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSponsorshipStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateSponsorshipStatus(params: UpdateSponsorshipStatus$Params, context?: HttpContext): Observable<{
}> {
    return this.updateSponsorshipStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllSponsorships()` */
  static readonly GetAllSponsorshipsPath = '/sponsorships';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSponsorships()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSponsorships$Response(params?: GetAllSponsorships$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSponsorshipResponse>> {
    return getAllSponsorships(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSponsorships$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSponsorships(params?: GetAllSponsorships$Params, context?: HttpContext): Observable<PageResponseSponsorshipResponse> {
    return this.getAllSponsorships$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSponsorshipResponse>): PageResponseSponsorshipResponse => r.body)
    );
  }

  /** Path part for operation `getSponsorshipById()` */
  static readonly GetSponsorshipByIdPath = '/sponsorships/{sponsorshipId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSponsorshipById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSponsorshipById$Response(params: GetSponsorshipById$Params, context?: HttpContext): Observable<StrictHttpResponse<SponsorshipResponse>> {
    return getSponsorshipById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSponsorshipById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSponsorshipById(params: GetSponsorshipById$Params, context?: HttpContext): Observable<SponsorshipResponse> {
    return this.getSponsorshipById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SponsorshipResponse>): SponsorshipResponse => r.body)
    );
  }

  /** Path part for operation `getSponsorshipsByStatus()` */
  static readonly GetSponsorshipsByStatusPath = '/sponsorships/status/{status}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSponsorshipsByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSponsorshipsByStatus$Response(params: GetSponsorshipsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSponsorshipResponse>> {
    return getSponsorshipsByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSponsorshipsByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSponsorshipsByStatus(params: GetSponsorshipsByStatus$Params, context?: HttpContext): Observable<PageResponseSponsorshipResponse> {
    return this.getSponsorshipsByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSponsorshipResponse>): PageResponseSponsorshipResponse => r.body)
    );
  }

  /** Path part for operation `deleteSponsorship()` */
  static readonly DeleteSponsorshipPath = '/sponsorships/{sponsorshipId}/delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSponsorship()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSponsorship$Response(params: DeleteSponsorship$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteSponsorship(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSponsorship$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSponsorship(params: DeleteSponsorship$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteSponsorship$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
