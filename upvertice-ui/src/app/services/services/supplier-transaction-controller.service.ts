/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteSupplierTransaction } from '../fn/supplier-transaction-controller/delete-supplier-transaction';
import { DeleteSupplierTransaction$Params } from '../fn/supplier-transaction-controller/delete-supplier-transaction';
import { getSupplierTransactions } from '../fn/supplier-transaction-controller/get-supplier-transactions';
import { GetSupplierTransactions$Params } from '../fn/supplier-transaction-controller/get-supplier-transactions';
import { getTransactionById } from '../fn/supplier-transaction-controller/get-transaction-by-id';
import { GetTransactionById$Params } from '../fn/supplier-transaction-controller/get-transaction-by-id';
import { PageResponseSupplierTransactionResponse } from '../models/page-response-supplier-transaction-response';
import { SupplierTransactionResponse } from '../models/supplier-transaction-response';
import { updateSupplierTransaction } from '../fn/supplier-transaction-controller/update-supplier-transaction';
import { UpdateSupplierTransaction$Params } from '../fn/supplier-transaction-controller/update-supplier-transaction';

@Injectable({ providedIn: 'root' })
export class SupplierTransactionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSupplierTransaction()` */
  static readonly UpdateSupplierTransactionPath = '/supplier-transactions/update/{transactionId}';

  /**
   * Update Supplier Transaction.
   *
   * Update an existing Supplier Transaction with new data and images.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSupplierTransaction()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateSupplierTransaction$Response(params: UpdateSupplierTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierTransactionResponse>> {
    return updateSupplierTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Supplier Transaction.
   *
   * Update an existing Supplier Transaction with new data and images.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSupplierTransaction$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateSupplierTransaction(params: UpdateSupplierTransaction$Params, context?: HttpContext): Observable<SupplierTransactionResponse> {
    return this.updateSupplierTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierTransactionResponse>): SupplierTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getSupplierTransactions()` */
  static readonly GetSupplierTransactionsPath = '/supplier-transactions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSupplierTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSupplierTransactions$Response(params?: GetSupplierTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSupplierTransactionResponse>> {
    return getSupplierTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSupplierTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSupplierTransactions(params?: GetSupplierTransactions$Params, context?: HttpContext): Observable<PageResponseSupplierTransactionResponse> {
    return this.getSupplierTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSupplierTransactionResponse>): PageResponseSupplierTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getTransactionById()` */
  static readonly GetTransactionByIdPath = '/supplier-transactions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionById$Response(params: GetTransactionById$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierTransactionResponse>> {
    return getTransactionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionById(params: GetTransactionById$Params, context?: HttpContext): Observable<SupplierTransactionResponse> {
    return this.getTransactionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierTransactionResponse>): SupplierTransactionResponse => r.body)
    );
  }

  /** Path part for operation `deleteSupplierTransaction()` */
  static readonly DeleteSupplierTransactionPath = '/supplier-transactions/delete/{transactionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSupplierTransaction()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSupplierTransaction$Response(params: DeleteSupplierTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSupplierTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSupplierTransaction$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSupplierTransaction(params: DeleteSupplierTransaction$Params, context?: HttpContext): Observable<void> {
    return this.deleteSupplierTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
