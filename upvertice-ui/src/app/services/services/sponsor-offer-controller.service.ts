/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { chooseSponsorOffer } from '../fn/sponsor-offer-controller/choose-sponsor-offer';
import { ChooseSponsorOffer$Params } from '../fn/sponsor-offer-controller/choose-sponsor-offer';
import { createSponsorOffer } from '../fn/sponsor-offer-controller/create-sponsor-offer';
import { CreateSponsorOffer$Params } from '../fn/sponsor-offer-controller/create-sponsor-offer';
import { deleteSponsorOffer } from '../fn/sponsor-offer-controller/delete-sponsor-offer';
import { DeleteSponsorOffer$Params } from '../fn/sponsor-offer-controller/delete-sponsor-offer';
import { getAllSponsorOffers } from '../fn/sponsor-offer-controller/get-all-sponsor-offers';
import { GetAllSponsorOffers$Params } from '../fn/sponsor-offer-controller/get-all-sponsor-offers';
import { getSponsorOffersByStatus } from '../fn/sponsor-offer-controller/get-sponsor-offers-by-status';
import { GetSponsorOffersByStatus$Params } from '../fn/sponsor-offer-controller/get-sponsor-offers-by-status';
import { PageResponseSponsorOfferResponse } from '../models/page-response-sponsor-offer-response';
import { SponsorOfferResponse } from '../models/sponsor-offer-response';
import { updateChosenSponsorOffer } from '../fn/sponsor-offer-controller/update-chosen-sponsor-offer';
import { UpdateChosenSponsorOffer$Params } from '../fn/sponsor-offer-controller/update-chosen-sponsor-offer';
import { updateSponsorOffer } from '../fn/sponsor-offer-controller/update-sponsor-offer';
import { UpdateSponsorOffer$Params } from '../fn/sponsor-offer-controller/update-sponsor-offer';

@Injectable({ providedIn: 'root' })
export class SponsorOfferControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSponsorOffer()` */
  static readonly UpdateSponsorOfferPath = '/sponsor-offers/{offerId}/updateSponsorOffer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSponsorOffer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSponsorOffer$Response(params?: UpdateSponsorOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<SponsorOfferResponse>> {
    return updateSponsorOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSponsorOffer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSponsorOffer(params?: UpdateSponsorOffer$Params, context?: HttpContext): Observable<SponsorOfferResponse> {
    return this.updateSponsorOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<SponsorOfferResponse>): SponsorOfferResponse => r.body)
    );
  }

  /** Path part for operation `updateChosenSponsorOffer()` */
  static readonly UpdateChosenSponsorOfferPath = '/sponsor-offers/updateSponsorOfferChoice';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateChosenSponsorOffer()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateChosenSponsorOffer$Response(params: UpdateChosenSponsorOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updateChosenSponsorOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateChosenSponsorOffer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateChosenSponsorOffer(params: UpdateChosenSponsorOffer$Params, context?: HttpContext): Observable<string> {
    return this.updateChosenSponsorOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `createSponsorOffer()` */
  static readonly CreateSponsorOfferPath = '/sponsor-offers/createSponsorOffer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSponsorOffer()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createSponsorOffer$Response(params?: CreateSponsorOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createSponsorOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSponsorOffer$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createSponsorOffer(params?: CreateSponsorOffer$Params, context?: HttpContext): Observable<string> {
    return this.createSponsorOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `chooseSponsorOffer()` */
  static readonly ChooseSponsorOfferPath = '/sponsor-offers/chooseSponsorOffer/{offerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `chooseSponsorOffer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  chooseSponsorOffer$Response(params: ChooseSponsorOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return chooseSponsorOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `chooseSponsorOffer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  chooseSponsorOffer(params: ChooseSponsorOffer$Params, context?: HttpContext): Observable<number> {
    return this.chooseSponsorOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getSponsorOffersByStatus()` */
  static readonly GetSponsorOffersByStatusPath = '/sponsor-offers/sponsorOffersByStatus';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSponsorOffersByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSponsorOffersByStatus$Response(params: GetSponsorOffersByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSponsorOfferResponse>> {
    return getSponsorOffersByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSponsorOffersByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSponsorOffersByStatus(params: GetSponsorOffersByStatus$Params, context?: HttpContext): Observable<PageResponseSponsorOfferResponse> {
    return this.getSponsorOffersByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSponsorOfferResponse>): PageResponseSponsorOfferResponse => r.body)
    );
  }

  /** Path part for operation `getAllSponsorOffers()` */
  static readonly GetAllSponsorOffersPath = '/sponsor-offers/allSponsorOffers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSponsorOffers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSponsorOffers$Response(params?: GetAllSponsorOffers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSponsorOfferResponse>> {
    return getAllSponsorOffers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSponsorOffers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSponsorOffers(params?: GetAllSponsorOffers$Params, context?: HttpContext): Observable<PageResponseSponsorOfferResponse> {
    return this.getAllSponsorOffers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSponsorOfferResponse>): PageResponseSponsorOfferResponse => r.body)
    );
  }

  /** Path part for operation `deleteSponsorOffer()` */
  static readonly DeleteSponsorOfferPath = '/sponsor-offers/{offerId}/deleteSponsorOffer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSponsorOffer()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSponsorOffer$Response(params: DeleteSponsorOffer$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSponsorOffer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSponsorOffer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSponsorOffer(params: DeleteSponsorOffer$Params, context?: HttpContext): Observable<void> {
    return this.deleteSponsorOffer$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
